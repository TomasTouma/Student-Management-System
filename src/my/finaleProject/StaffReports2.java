/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.finaleProject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static my.val.ValidationAndCalculationMethods.*;

/**
 * StaffReports2 JFrame class provides a graphical interface for staff
 * reporting. It allows the user to: - View modules a staff member is enrolled
 * in. - See students related to a specific staff member. - Display detailed
 * staff information.
 *
 * The class retrieves data from a MySQL database and displays it using
 * PrintFrame for formatted output. Staff selection can be done via JComboBox
 * for staff name or staff ID, with automatic synchronization between the two.
 *
 * Database connection details (URL, username, password) are configured within
 * the class.
 *
 * @author Tomasz Touma
 * @version 1.0
 * @since 1.8
 */
public class StaffReports2 extends javax.swing.JFrame {

    String url = "jdbc:mysql://127.0.0.1:3306/";
    //database name
    String dbName = "finaleprojectdb";
    //not needed for now

    String userName = "root";
    //password for connecting to local host
    String password = "root";

    /**
     * Creates new form StaffReports2
     */
    public StaffReports2() {
        initComponents();
        loadComboBoxes();

    }

    /**
     * Loads staff names and staff IDs into the JComboBox elements when the
     * frame is initialized.
     */
    private void loadComboBoxes() {
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;

            String sql = "SELECT DISTINCT first_name,surname FROM staff";

            prest = con.prepareStatement(sql);

            ResultSet rs = prest.executeQuery();

            while (rs.next()) {
                jComboBoxName.addItem(rs.getString(1) + " " + rs.getString(2));
            }

        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;

            String sql = "SELECT DISTINCT staff_id FROM staff";

            prest = con.prepareStatement(sql);

            ResultSet rs = prest.executeQuery();

            while (rs.next()) {
                jComboBoxStaffID.addItem(rs.getString(1));
            }

        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelName = new javax.swing.JLabel();
        jLabelStaffID = new javax.swing.JLabel();
        jComboBoxName = new javax.swing.JComboBox<>();
        jComboBoxStaffID = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jButtonModulesInrolled = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jButtonRelatedStudents = new javax.swing.JButton();
        jButtonDetails = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reports");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search by Staff name or StaffID"));

        jLabelName.setText("Name:");

        jLabelStaffID.setText("StaffID:");

        jComboBoxName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNameActionPerformed(evt);
            }
        });

        jComboBoxStaffID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStaffIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabelName)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxName, 0, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jLabelStaffID)
                    .addComponent(jComboBoxName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jButtonModulesInrolled.setText("Modules Inrolled");
        jButtonModulesInrolled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModulesInrolledActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonRelatedStudents.setText("Related Students");
        jButtonRelatedStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRelatedStudentsActionPerformed(evt);
            }
        });

        jButtonDetails.setText("View Staff Details");
        jButtonDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonClose, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModulesInrolled, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRelatedStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jButtonDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonModulesInrolled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonRelatedStudents)
                .addGap(18, 18, 18)
                .addComponent(jButtonClose)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Displays the modules that a selected staff member is enrolled in. Fetches
     * data from the database and shows it in a PrintFrame.
     *
     * @param evt ActionEvent triggered by clicking the "Modules Enrolled"
     * button.
     */
    private void jButtonModulesInrolledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModulesInrolledActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            String sql = "SELECT  module.module_name,course.course_name FROM staff \n"
                    + "INNER JOIN module ON staff.staff_id=module.staff_id INNER JOIN course ON module.course_code = course.course_code WHERE staff.staff_id=?";

            PreparedStatement prest = con.prepareStatement(sql);
            prest.setString(1, (String) jComboBoxStaffID.getSelectedItem());

            ResultSet rs = prest.executeQuery();

            PrintFrame spf = new PrintFrame();
            StringBuilder modulesAndCourses = new StringBuilder();
            modulesAndCourses.append("Name: ").append((String) jComboBoxName.getSelectedItem())
                    .append("\t").append("StaffID: ").append((String) jComboBoxStaffID.getSelectedItem()).append("\n\n")
                    .append("Module Name").append("\t\t\t").append("Course Name").append("\n");

            boolean hasData = false;

            while (rs.next()) {  // Use while loop to process all rows
                hasData = true;
                modulesAndCourses.append(rs.getString("module_name")).append("\t").append("\t")
                        .append(rs.getString("course_name")).append("\n");
            }

            if (hasData) {
                spf.jTextAreaPrint.setText(modulesAndCourses.toString());
                spf.setVisible(true);
            } else {
                // If no data found for the staff ID, display a message
                JOptionPane.showMessageDialog(null, "No modules found for Staff ID: " + (String) jComboBoxStaffID.getSelectedItem());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jButtonModulesInrolledActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    /**
     * Displays students related to the selected staff member. Fetches data from
     * the database and shows it in a PrintFrame.
     *
     * @param evt ActionEvent triggered by clicking the "Related Students"
     * button.
     */
    private void jButtonRelatedStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRelatedStudentsActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            String sql = "SELECT DISTINCT student.student_id,student.first_name,student.surname,course.course_name FROM student"
                    + " INNER JOIN class_group ON student.class_group_code=class_group.class_group_code\n"
                    + "INNER JOIN course ON class_group.course_code=course.course_code \n"
                    + "INNER JOIN module ON course.course_code=module.course_code\n"
                    + "INNER JOIN staff ON module.staff_id=staff.staff_id WHERE staff.staff_id=?";

            PreparedStatement prest = con.prepareStatement(sql);
            prest.setString(1, (String) jComboBoxStaffID.getSelectedItem());

            ResultSet rs = prest.executeQuery();

            PrintFrame spf = new PrintFrame();
            StringBuilder modulesAndCourses = new StringBuilder();
            modulesAndCourses.append("Name: ").append((String) jComboBoxName.getSelectedItem())
                    .append("\t").append("StaffID: ").append((String) jComboBoxStaffID.getSelectedItem()).append("\n\n")
                    .append("StudentID").append("\t").append("Name").append("\t\t").append("Course Name").append("\n");

            boolean hasData = false;

            while (rs.next()) {  // Use while loop to process all rows
                hasData = true;
                modulesAndCourses.append(rs.getString("student_id")).append("\t")
                        .append(rs.getString("first_name")).append(" ").append(rs.getString("surname")).append("\t").append("\t")
                        .append(rs.getString("course_name")).append("\n");
            }

            if (hasData) {
                spf.jTextAreaPrint.setText(modulesAndCourses.toString());
                spf.setVisible(true);
            } else {
                // If no data found for the staff ID, display a message
                JOptionPane.showMessageDialog(null, "No related students found for Staff ID: " + (String) jComboBoxStaffID.getSelectedItem());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jButtonRelatedStudentsActionPerformed

    /**
     * Displays detailed information for the selected staff member. Fetches data
     * from the database and shows it in a PrintFrame.
     *
     * @param evt ActionEvent triggered by clicking the "Details" button.
     */
    private void jButtonDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetailsActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;
            String sql = "SELECT staff_id,first_name,surname,email,phone_number,ppsn,gender,date_of_birth,"
                    + "specializations,address_line_1,address_line_2,county,eircode FROM staff WHERE staff_id=?";

            prest = con.prepareStatement(sql);
            prest.setString(1, (String) jComboBoxStaffID.getSelectedItem());

            ResultSet rs = prest.executeQuery();
            if (rs.next()) {
                PrintFrame spf = new PrintFrame();
                spf.jTextAreaPrint.setText(spf.jTextAreaPrint.getText() + "StudentID: " + rs.getString("staff_id") + "\n"
                        + "Name: " + rs.getString("first_name") + " " + rs.getString("surname") + "\n"
                        + "Email: " + rs.getString("email") + "\t\t" + "Phone Number: " + rs.getString("phone_number") + "\n"
                        + "PPSN: " + rs.getString("ppsn") + "\t\t" + "Gender: " + rs.getString("gender") + "\n"
                        + "Date of Birth: " + rs.getString("date_of_birth") + "\t\t" + "Specializations: " + rs.getString("specializations") + "\n"
                        + "Address 1: " + rs.getString("address_line_1") + "\t\t" + "Address 2: " + rs.getString("address_line_2") + "\n"
                        + "County: " + rs.getString("county") + "\t\t" + "Eircode: " + rs.getString("eircode") + "\n");

                spf.setVisible(true);
            } else {
                // If no data found for the student ID, display a message
                JOptionPane.showMessageDialog(null, "No staff found with ID: " + (String) jComboBoxStaffID.getSelectedItem());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jButtonDetailsActionPerformed

    /**
     * Updates the staff ID JComboBox based on the selected staff name. Keeps
     * the ID in sync with the selected name.
     *
     * @param evt ActionEvent triggered when a staff name is selected.
     */
    private void jComboBoxNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNameActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;
            String sql = "SELECT staff_id FROM staff WHERE  CONCAT(TRIM(first_name), ' ', TRIM(surname))=?";

            prest = con.prepareStatement(sql);
            prest.setString(1, (String) jComboBoxName.getSelectedItem());

            ResultSet rs = prest.executeQuery();
            while (rs.next()) {
                jComboBoxStaffID.setSelectedItem(rs.getString(1));
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jComboBoxNameActionPerformed

    /**
     * Updates the staff name JComboBox based on the selected staff ID. Keeps
     * the name in sync with the selected ID.
     *
     * @param evt ActionEvent triggered when a staff ID is selected.
     */
    private void jComboBoxStaffIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStaffIDActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;
            String sql = "SELECT first_name,surname FROM staff WHERE  staff_id=?";

            prest = con.prepareStatement(sql);
            prest.setString(1, (String) jComboBoxStaffID.getSelectedItem());

            ResultSet rs = prest.executeQuery();
            while (rs.next()) {
                jComboBoxName.setSelectedItem(rs.getString(1) + " " + rs.getString(2));
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jComboBoxStaffIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffReports2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffReports2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffReports2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffReports2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffReports2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDetails;
    private javax.swing.JButton jButtonModulesInrolled;
    private javax.swing.JButton jButtonRelatedStudents;
    private javax.swing.JComboBox<String> jComboBoxName;
    private javax.swing.JComboBox<String> jComboBoxStaffID;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelStaffID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
