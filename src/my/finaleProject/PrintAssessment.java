/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.finaleProject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static my.val.ValidationAndCalculationMethods.*;

/**
 * The {@code PrintAssessment} class provides a GUI for generating and displaying
 * assessment reports for students and class groups. 
 * <p>
 * This frame allows the user to:
 * <ul>
 *   <li>Search for an individual student's assessment results by Student ID</li>
 *   <li>Generate group assessment reports based on a selected course and class group</li>
 *   <li>Retrieve course and class group data dynamically from the database</li>
 *   <li>Display formatted results (assignments, exams, final results) in a printable text area</li>
 * </ul>
 * <p>
 * The class connects to the {@code finaleprojectdb} database and uses SQL queries
 * with JOIN operations across multiple tables (student, course, class_group, module, and assessment).
 * <p>
 * Results are displayed in a {@code PrintFrame}, and users can either print
 * or close the report window.
 * 
 * @author Tomasz Touma
 * @version 1.0
 * @since 1.8
 */
public class PrintAssessment extends javax.swing.JFrame {

    String url = "jdbc:mysql://127.0.0.1:3306/";
    //database name
    String dbName = "finaleprojectdb";
    //not needed for now

    String userName = "root";
    //password for connecting to local host
    String password = "root";

    /**
     * Creates new form PrintAssessment
     */
    public PrintAssessment() {

        initComponents();
    }

    private String padString(String input, int width) {
        return String.format("%-" + width + "s", input);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelCourseName = new javax.swing.JLabel();
        jComboBoxCourseName = new javax.swing.JComboBox<>();
        jLabelClassGroup = new javax.swing.JLabel();
        jComboBoxClassGroup = new javax.swing.JComboBox<>();
        jLabelStudentID = new javax.swing.JLabel();
        jTextFieldStudentID = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonGroupAssessment = new javax.swing.JButton();
        jButtonIndividualAssessment = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Print Assessments");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Course Name and Class Group, or search by StudentID"));

        jLabelCourseName.setText("Course Name:");

        jComboBoxCourseName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        jComboBoxCourseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCourseNameActionPerformed(evt);
            }
        });

        jLabelClassGroup.setText("Class Group:");

        jComboBoxClassGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "" }));
        jComboBoxClassGroup.setSelectedItem(null);

        jLabelStudentID.setText("StudentID:");

        jTextFieldStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldStudentIDKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCourseName)
                    .addComponent(jLabelClassGroup))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBoxCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBoxClassGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelStudentID)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldStudentID)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCourseName)
                    .addComponent(jComboBoxCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelClassGroup)
                    .addComponent(jComboBoxClassGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStudentID)
                    .addComponent(jTextFieldStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jButtonGroupAssessment.setText("View Group Assessments");
        jButtonGroupAssessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGroupAssessmentActionPerformed(evt);
            }
        });

        jButtonIndividualAssessment.setText("View Individual Assessments");
        jButtonIndividualAssessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIndividualAssessmentActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonIndividualAssessment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGroupAssessment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jButtonClose)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButtonGroupAssessment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonIndividualAssessment)
                .addGap(18, 18, 18)
                .addComponent(jButtonClose)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;

            String sql = "SELECT course_name FROM course";

            prest = con.prepareStatement(sql);

            ResultSet rs = prest.executeQuery();

            while (rs.next()) {
                jComboBoxCourseName.addItem(rs.getString(1));
            }

        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_formWindowOpened

    private void jComboBoxCourseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCourseNameActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;

            String sql = "SELECT class_group_code FROM class_group WHERE course_name=?";

            prest = con.prepareStatement(sql);

            String selectedCourse = (String) jComboBoxCourseName.getSelectedItem();
            prest.setString(1, selectedCourse);
            ResultSet rs = prest.executeQuery();
            jComboBoxClassGroup.removeAllItems();
            jComboBoxClassGroup.addItem("");
            while (rs.next()) {
                jComboBoxClassGroup.addItem(rs.getString(1));
            }

        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jComboBoxCourseNameActionPerformed

    private void jTextFieldStudentIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStudentIDKeyTyped
        ValidateDigit(evt);
    }//GEN-LAST:event_jTextFieldStudentIDKeyTyped

    /**
     * Handles the action for the "Individual Assessment" button.
     * <p>
     * Retrieves assessment details for a single student based on the 
     * entered Student ID. Data is fetched from the database using
     * JOIN queries across student, module, course, class_group, and 
     * assessment tables. 
     * <p>
     * The retrieved results (assignments, exam, and final result) are 
     * displayed in a {@code PrintFrame}. If no record is found, an error 
     * message is shown.
     *
     * @param evt the action event triggered by the button click
     */
    private void jButtonIndividualAssessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIndividualAssessmentActionPerformed
        PrintFrame spf = new PrintFrame();
        String sql = "SELECT student.first_name, student.surname, module.module_name, assessment.assignment_1, "
                + "assessment.assignment_2, assessment.exam, assessment.result "
                + "FROM assessment "
                + "INNER JOIN module ON module.module_code = assessment.module_code "
                + "INNER JOIN course ON course.course_code = module.course_code "
                + "INNER JOIN class_group ON class_group.course_code = course.course_code "
                + "INNER JOIN student ON student.class_group_code = class_group.class_group_code "
                + "WHERE student_id = ?";

        try (Connection con = DriverManager.getConnection(url + dbName, userName, password); PreparedStatement prest = con.prepareStatement(sql)) {

            prest.setInt(1, validateInteger(jTextFieldStudentID.getText()));
            try (ResultSet rs = prest.executeQuery()) {
                if (rs.next()) {
                    
                    String header = "Name: " + rs.getString("first_name") + " " + rs.getString("surname") + "\t" + "StudentID: " + jTextFieldStudentID.getText() + "\n\n"
                            + "Module Name\t\tAssignment 1\t\tAssignment 2\t\tExam\t\tFinal Results\n";
                    spf.jTextAreaPrint.setText(header);

                    do {
                        String moduleName = rs.getString("module_name");
                        String assignment1 = rs.getString("assignment_1");
                        String assignment2 = rs.getString("assignment_2");
                        String exam = rs.getString("exam");
                        String result = rs.getString("result");

                        
                        spf.jTextAreaPrint.append(String.format("%-40s%-40s%-40s%-40s%-40s\n", moduleName, assignment1, assignment2, exam, result));
                        spf.setVisible(true);
                    } while (rs.next());
                } else {
                      JOptionPane.showMessageDialog(null, "No record found", "Wrong StudentID", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException err) {
            System.out.println(err.getMessage());
            
            JOptionPane.showMessageDialog(null, "Failed to retrieve data. Error: "+ err.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButtonIndividualAssessmentActionPerformed

    /**
     * Handles the action for the "Group Assessment" button.
     * <p>
     * Retrieves assessment results for an entire class group 
     * based on the selected course and class group from the combo boxes. 
     * Data is pulled from the database with JOIN queries across
     * course, module, student, class_group, and assessment tables.
     * <p>
     * The results for all students in the group are displayed in a 
     * {@code PrintFrame}. If no records are found, an error dialog is shown.
     *
     * @param evt the action event triggered by the button click
     */
    private void jButtonGroupAssessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGroupAssessmentActionPerformed
        PrintFrame spf = new PrintFrame();
        String sql = "SELECT class_group.class_group_code,student.first_name,student.surname,course.course_name,module.module_name,assessment.assignment_1,\n" +
"                    assessment.assignment_2,assessment.exam,assessment.result FROM assessment \n" +
"                    INNER JOIN module ON module.module_code=assessment.module_code\n" +
"                    INNER JOIN course ON course.course_code=module.course_code\n" +
"                    INNER JOIN class_group ON class_group.course_code=course.course_code\n" +
"                    INNER JOIN student ON student.class_group_code=class_group.class_group_code\n" +
"                    WHERE course.course_name=? AND class_group.class_group_code=?;";
                

        try (Connection con = DriverManager.getConnection(url + dbName, userName, password); PreparedStatement prest = con.prepareStatement(sql)) {

            prest.setString(1, (String)jComboBoxCourseName.getSelectedItem());
            prest.setString(2, (String)jComboBoxClassGroup.getSelectedItem());
            try (ResultSet rs = prest.executeQuery()) {
                if (rs.next()) {
                    // Initialize header and first row of data
                    String header = "Course Name: " + rs.getString("course_name") + "\t" + "Class Group: " + rs.getString("class_group_code") + "\n\n"
                            + "Name\t\tModule Name\t\tAssignment 1\t\tAssignment 2\t\tExam\t\tFinal Results\n";
                    spf.jTextAreaPrint.setText(header);

                    do {
                        String name = rs.getString("first_name")+" "+rs.getString("surname");
                        String moduleName = rs.getString("module_name");
                        String assignment1 = rs.getString("assignment_1");
                        String assignment2 = rs.getString("assignment_2");
                        String exam = rs.getString("exam");
                        String result = rs.getString("result");

                        // Append the formatted data to the JTextAreaPrint
                        spf.jTextAreaPrint.append(String.format("%-30s%-50s%-40s%-40s%-50s%-40s\n",
                                name,moduleName, assignment1, assignment2, exam, result));
                        spf.setVisible(true);
                    } while (rs.next());
                } else {
//                    spf.jTextAreaPrint.setText("No records found.");
                      JOptionPane.showMessageDialog(null, "Please select Class Group", "Error, No records found", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException err) {
            System.out.println(err.getMessage());
            //spf.jTextAreaPrint.setText("Failed to retrieve data. Error: " + err.getMessage());
            JOptionPane.showMessageDialog(null, "Failed to retrieve data. Error: "+ err.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGroupAssessmentActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrintAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrintAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrintAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrintAssessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrintAssessment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonGroupAssessment;
    private javax.swing.JButton jButtonIndividualAssessment;
    private javax.swing.JComboBox<String> jComboBoxClassGroup;
    private javax.swing.JComboBox<String> jComboBoxCourseName;
    private javax.swing.JLabel jLabelClassGroup;
    private javax.swing.JLabel jLabelCourseName;
    private javax.swing.JLabel jLabelStudentID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldStudentID;
    // End of variables declaration//GEN-END:variables
}
