/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.finaleProject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * StaffViewFrame is a JFrame that allows the user to view, search, and manage
 * staff members in the database.
 *
 * Features include: - Viewing all staff members in a table. - Filtering staff
 * by surname, first name, staff ID, gender, or specializations. - Clearing
 * search fields to reset the table. - Printing the currently displayed staff
 * list to a PrintFrame. - Viewing detailed information for a selected staff
 * member. - Opening reports for a selected staff member.
 *
 * The class connects to a MySQL database using JDBC and retrieves staff data
 * from the "finaleprojectdb" database.
 *
 * @author Tomasz Touma
 * @version 1.0
 * @since 1.8
 */
public class StaffViewFrame extends javax.swing.JFrame {

    String url = "jdbc:mysql://127.0.0.1:3306/";
    //database name
    String dbName = "finaleprojectdb";
    //not needed for now

    String userName = "root";
    //password for connecting to local host
    String password = "root";

    /**
     * Creates new form StaffViewFrame
     */
    public StaffViewFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonClearFields = new javax.swing.JButton();
        jButtonSearch = new javax.swing.JButton();
        jTextFieldSurname = new javax.swing.JTextField();
        jTextFieldFirstName = new javax.swing.JTextField();
        jTextFieldStaffID = new javax.swing.JTextField();
        jComboBoxSpecializations = new javax.swing.JComboBox<>();
        jComboBoxGender = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStaff = new javax.swing.JTable();
        jButtonClose = new javax.swing.JButton();
        jButtonViewDetails = new javax.swing.JButton();
        jButtonReports = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Staff Search");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search for staff by ID, Name, Gender, Class Group, or Course Name (One at the time)"));

        jLabel1.setText("Surname:");

        jLabel2.setText("First Name:");

        jLabel3.setText("StaffID:");

        jLabel4.setText("Gender:");

        jLabel5.setText("Specializations:");

        jButtonClearFields.setText("Clear Fields");
        jButtonClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearFieldsActionPerformed(evt);
            }
        });

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jComboBoxSpecializations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "(Select All)" }));

        jComboBoxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Male", "Female" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldSurname, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(jTextFieldFirstName))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldStaffID)
                    .addComponent(jComboBoxGender, 0, 154, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(35, 35, 35)
                        .addComponent(jComboBoxSpecializations, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonClearFields))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSpecializations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jButtonSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClearFields))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a Staff member you want to work with, then select an action from the buttons below."));

        jTableStaff.setAutoCreateRowSorter(true);
        jTableStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "StaffID", "Surname", "First Name", "Gender", "Specializations"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableStaff.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableStaff);
        if (jTableStaff.getColumnModel().getColumnCount() > 0) {
            jTableStaff.getColumnModel().getColumn(0).setResizable(false);
            jTableStaff.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTableStaff.getColumnModel().getColumn(1).setResizable(false);
            jTableStaff.getColumnModel().getColumn(2).setResizable(false);
            jTableStaff.getColumnModel().getColumn(3).setResizable(false);
            jTableStaff.getColumnModel().getColumn(3).setPreferredWidth(5);
            jTableStaff.getColumnModel().getColumn(4).setResizable(false);
            jTableStaff.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonViewDetails.setText("Edit/View Details");
        jButtonViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewDetailsActionPerformed(evt);
            }
        });

        jButtonReports.setText("Reports");
        jButtonReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReportsActionPerformed(evt);
            }
        });

        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonReports)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonViewDetails)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonClose)
                    .addComponent(jButtonViewDetails)
                    .addComponent(jButtonReports)
                    .addComponent(jButtonPrint))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clears all input fields and resets combo boxes in the staff search panel.
     */
    private void jButtonClearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearFieldsActionPerformed
        jTextFieldSurname.setText("");
        jTextFieldFirstName.setText("");
        jTextFieldStaffID.setText("");
        jComboBoxGender.setSelectedItem(" ");
        jComboBoxSpecializations.setSelectedItem(" ");
    }//GEN-LAST:event_jButtonClearFieldsActionPerformed

    /**
     * Searches for staff members based on the entered fields and selected
     * filters. If "(Select All)" is selected in the specializations combo box,
     * all staff members are displayed. Otherwise, the search filters the table
     * based on surname, first name, staff ID, gender, or specializations.
     */
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        String selectedOption = (String) jComboBoxSpecializations.getSelectedItem();
        if ("(Select All)".equals(selectedOption)) {
            try {

                Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                PreparedStatement prest = null;

                String sql = "SELECT staff.staff_id,staff.surname,staff.first_name,staff.gender,staff.specializations FROM staff";

                prest = con.prepareStatement(sql);

                ResultSet rs = prest.executeQuery();
                DefaultTableModel model = (DefaultTableModel) jTableStaff.getModel();
                model.setRowCount(0);
                while (rs.next()) {
                    model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
                }

            } catch (SQLException err) {

                System.out.println(err.getMessage());

            }
        } else {
            try {

                Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
                PreparedStatement prest = null;

                String sql = "SELECT DISTINCT staff.staff_id,staff.surname,staff.first_name,staff.gender,staff.specializations FROM staff\n"
                        + "INNER JOIN module ON staff.staff_id=module.staff_id\n"
                        + "INNER JOIN course ON module.course_code=course.course_code\n"
                        + "INNER JOIN class_group ON course.course_code=class_group.course_code\n"
                        + "WHERE staff.surname=? OR staff.first_name=? OR staff.staff_id=? OR staff.specializations=? OR staff.gender=?";

                prest = con.prepareStatement(sql);
                prest.setString(1, jTextFieldSurname.getText());
                prest.setString(2, jTextFieldFirstName.getText());
                prest.setString(3, jTextFieldStaffID.getText());
                prest.setString(4, (String) jComboBoxSpecializations.getSelectedItem());
                prest.setString(5, (String) jComboBoxGender.getSelectedItem());

                ResultSet rs = prest.executeQuery();
                DefaultTableModel model = (DefaultTableModel) jTableStaff.getModel();

                model.setRowCount(0);
                while (rs.next()) {
                    model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
                }

            } catch (SQLException err) {

                System.out.println(err.getMessage());

            }
        }

    }//GEN-LAST:event_jButtonSearchActionPerformed

    /**
     * Initializes the specializations combo box when the window is opened.
     * Retrieves all distinct specializations from the staff table in the
     * database.
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;

            String sql = "SELECT DISTINCT specializations FROM staff";

            prest = con.prepareStatement(sql);

            ResultSet rs = prest.executeQuery();

            while (rs.next()) {
                jComboBoxSpecializations.addItem(rs.getString(1));
            }

        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * Prints the currently displayed staff table to a PrintFrame. Includes
     * columns: StaffID, Surname, First Name, Gender, Specializations.
     */
    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
        PrintFrame spf = new PrintFrame();

        DefaultTableModel model = (DefaultTableModel) jTableStaff.getModel();
        spf.jTextAreaPrint.setText(spf.jTextAreaPrint.getText() + "StaffID" + "\t" + "Surname" + "\t" + "First name" + "\t" + "Gender" + "\t" + "Specializations" + "\n" + "\n");
        for (int i = 0; i < jTableStaff.getRowCount(); i++) {
            String staffID = jTableStaff.getValueAt(i, 0).toString();
            String surname = jTableStaff.getValueAt(i, 1).toString();
            String firstName = jTableStaff.getValueAt(i, 2).toString();
            String gender = jTableStaff.getValueAt(i, 3).toString();
            String specializations = jTableStaff.getValueAt(i, 4).toString();

            spf.jTextAreaPrint.setText(spf.jTextAreaPrint.getText() + staffID + "\t" + surname + "\t" + firstName + "\t" + gender + "\t" + specializations + "\n");
            spf.setVisible(true);
        }
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    /**
     * Opens the StaffForm window for the selected staff member from the table.
     * Displays full staff details for editing or viewing.
     */
    private void jButtonViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewDetailsActionPerformed
        int selectedRow = jTableStaff.getSelectedRow();
        if (selectedRow != -1) {
            Object value = jTableStaff.getValueAt(selectedRow, 0);
            try {
                int staffID = Integer.parseInt((String) value);
                StaffForm s1 = new StaffForm(staffID);
                s1.setVisible(true);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid StaffID format.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a staff member.");
        }
    }//GEN-LAST:event_jButtonViewDetailsActionPerformed

    /**
     * Opens the StaffReports window for the selected staff member from the
     * table. Allows the user to generate reports related to the staff member.
     */
    private void jButtonReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReportsActionPerformed
        int selectedRow = jTableStaff.getSelectedRow();
        if (selectedRow != -1) {
            Object value = jTableStaff.getValueAt(selectedRow, 0);
            try {
                int staffID = Integer.parseInt((String) value);
                StaffReports sr = new StaffReports(staffID);
                sr.setVisible(true);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid StaffID format.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a staff member.");
        }
    }//GEN-LAST:event_jButtonReportsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffViewFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearFields;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonReports;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonViewDetails;
    private javax.swing.JComboBox<String> jComboBoxGender;
    private javax.swing.JComboBox<String> jComboBoxSpecializations;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableStaff;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldStaffID;
    private javax.swing.JTextField jTextFieldSurname;
    // End of variables declaration//GEN-END:variables
}
