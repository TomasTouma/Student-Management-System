/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.finaleProject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static my.val.ValidationAndCalculationMethods.*;

/**
 *
 * @author Tomasz Touma
 * @version 1.0
 * @since 1.8
 *
 * <b>StaffReports</b> class provides a graphical interface for staff members to
 * view their assigned modules, related students, and detailed staff
 * information. It allows staff to generate printable reports of their modules
 * and student associations.
 *
 * @see Staff
 * @see PrintFrame
 *
 */
public class StaffReports extends javax.swing.JFrame {

    Staff s;
    private int staffID;
    String url = "jdbc:mysql://127.0.0.1:3306/";
    //database name
    String dbName = "finaleprojectdb";
    //not needed for now

    String userName = "root";
    //password for connecting to local host
    String password = "root";

    /**
     * Creates new form StaffReports
     */
    public StaffReports() {
        initComponents();
    }

    public StaffReports(int staffID) {
        initComponents();
        this.staffID = staffID;
        jTextFieldStaffID.setText(String.valueOf(staffID));
        loadStaffDetails();
    }

    private void loadStaffDetails() {
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            String sql = "SELECT first_name,surname FROM staff WHERE staff_id=?";

            PreparedStatement prest = con.prepareStatement(sql);
            prest.setInt(1, staffID);

            ResultSet rs = prest.executeQuery();

            if (rs.next()) {

                jTextFieldName.setText(rs.getString("first_name") + " " + rs.getString("surname"));

            } else {
                // If no data found for the student ID, display a message
                JOptionPane.showMessageDialog(null, "No staff found with ID: " + jTextFieldStaffID.getText());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelName = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabelStaffID = new javax.swing.JLabel();
        jTextFieldStaffID = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonModulesInrolled = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jButtonRelatedStudents = new javax.swing.JButton();
        jButtonDetails = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reports");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Staff Name and StaffID"));

        jLabelName.setText("Name:");

        jTextFieldName.setEditable(false);
        jTextFieldName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldName.setEnabled(false);

        jLabelStaffID.setText("StaffID:");

        jTextFieldStaffID.setEditable(false);
        jTextFieldStaffID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldStaffID.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabelName)
                .addGap(33, 33, 33)
                .addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabelStaffID)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStaffID)
                    .addComponent(jTextFieldStaffID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonModulesInrolled.setText("Modules Inrolled");
        jButtonModulesInrolled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModulesInrolledActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonRelatedStudents.setText("Related Students");
        jButtonRelatedStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRelatedStudentsActionPerformed(evt);
            }
        });

        jButtonDetails.setText("View Staff Details");
        jButtonDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(jButtonModulesInrolled, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRelatedStudents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jButtonDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonModulesInrolled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonRelatedStudents)
                .addGap(18, 18, 18)
                .addComponent(jButtonClose)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Loads and displays all modules that the staff member is enrolled in.
     * Fetches module names and associated courses from the database for the
     * staff member with the provided staffID.
     *
     * @param evt the event triggered by pressing the "Modules Inrolled" button
     * @see PrintFrame
     */
    private void jButtonModulesInrolledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModulesInrolledActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            String sql = "SELECT  module.module_name,course.course_name FROM staff \n"
                    + "INNER JOIN module ON staff.staff_id=module.staff_id INNER JOIN course ON module.course_code = course.course_code WHERE staff.staff_id=?";

            PreparedStatement prest = con.prepareStatement(sql);
            prest.setInt(1, staffID);

            ResultSet rs = prest.executeQuery();

            PrintFrame spf = new PrintFrame();
            StringBuilder modulesAndCourses = new StringBuilder();
            modulesAndCourses.append("Name: ").append(jTextFieldName.getText())
                    .append("\t").append("StaffID: ").append(jTextFieldStaffID.getText()).append("\n\n")
                    .append("Module Name").append("\t\t\t").append("Course Name").append("\n");

            boolean hasData = false;

            while (rs.next()) {  // Use while loop to process all rows
                hasData = true;
                modulesAndCourses.append(rs.getString("module_name")).append("\t").append("\t")
                        .append(rs.getString("course_name")).append("\n");
            }

            if (hasData) {
                spf.jTextAreaPrint.setText(modulesAndCourses.toString());
                spf.setVisible(true);
            } else {
                // If no data found for the staff ID, display a message
                JOptionPane.showMessageDialog(null, "No modules found for Staff ID: " + jTextFieldStaffID.getText());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }

    }//GEN-LAST:event_jButtonModulesInrolledActionPerformed

    /**
     * Loads and displays all students related to the staff member. Retrieves
     * distinct students associated with the staff member's modules and their
     * corresponding courses from the database.
     *
     * @param evt the event triggered by pressing the "Related Students" button
     * @see PrintFrame
     */
    private void jButtonRelatedStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRelatedStudentsActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            String sql = "SELECT DISTINCT student.student_id,student.first_name,student.surname,course.course_name FROM student"
                    + " INNER JOIN class_group ON student.class_group_code=class_group.class_group_code\n"
                    + "INNER JOIN course ON class_group.course_code=course.course_code \n"
                    + "INNER JOIN module ON course.course_code=module.course_code\n"
                    + "INNER JOIN staff ON module.staff_id=staff.staff_id WHERE staff.staff_id=?";

            PreparedStatement prest = con.prepareStatement(sql);
            prest.setInt(1, staffID);

            ResultSet rs = prest.executeQuery();

            PrintFrame spf = new PrintFrame();
            StringBuilder modulesAndCourses = new StringBuilder();
            modulesAndCourses.append("Name: ").append(jTextFieldName.getText())
                    .append("\t").append("StaffID: ").append(jTextFieldStaffID.getText()).append("\n\n")
                    .append("StudentID").append("\t").append("Name").append("\t\t").append("Course Name").append("\n");

            boolean hasData = false;

            while (rs.next()) {  // Use while loop to process all rows
                hasData = true;
                modulesAndCourses.append(rs.getString("student_id")).append("\t")
                        .append(rs.getString("first_name")).append(" ").append(rs.getString("surname")).append("\t").append("\t")
                        .append(rs.getString("course_name")).append("\n");
            }

            if (hasData) {
                spf.jTextAreaPrint.setText(modulesAndCourses.toString());
                spf.setVisible(true);
            } else {
                // If no data found for the staff ID, display a message
                JOptionPane.showMessageDialog(null, "No related students found for Staff ID: " + jTextFieldStaffID.getText());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jButtonRelatedStudentsActionPerformed

    /**
     * Displays detailed information of the staff member. Retrieves staff
     * details such as name, email, phone number, PPSN, gender, DOB,
     * specializations, and address from the database.
     *
     * @param evt the event triggered by pressing the "Details" button
     * @see PrintFrame
     */
    private void jButtonDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetailsActionPerformed
        try {

            Connection con = (Connection) DriverManager.getConnection(url + dbName, userName, password);
            PreparedStatement prest = null;
            String sql = "SELECT staff_id,first_name,surname,email,phone_number,ppsn,gender,date_of_birth,"
                    + "specializations,address_line_1,address_line_2,county,eircode FROM staff WHERE staff_id=?";

            prest = con.prepareStatement(sql);
            prest.setInt(1, staffID);

            ResultSet rs = prest.executeQuery();
            if (rs.next()) {
                PrintFrame spf = new PrintFrame();
                spf.jTextAreaPrint.setText(spf.jTextAreaPrint.getText() + "StudentID: " + rs.getString("staff_id") + "\n"
                        + "Name: " + rs.getString("first_name") + " " + rs.getString("surname") + "\n"
                        + "Email: " + rs.getString("email") + "\t\t" + "Phone Number: " + rs.getString("phone_number") + "\n"
                        + "PPSN: " + rs.getString("ppsn") + "\t\t" + "Gender: " + rs.getString("gender") + "\n"
                        + "Date of Birth: " + rs.getString("date_of_birth") + "\t\t" + "Specializations: " + rs.getString("specializations") + "\n"
                        + "Address 1: " + rs.getString("address_line_1") + "\t\t" + "Address 2: " + rs.getString("address_line_2") + "\n"
                        + "County: " + rs.getString("county") + "\t\t" + "Eircode: " + rs.getString("eircode") + "\n");

                spf.setVisible(true);
            } else {
                // If no data found for the student ID, display a message
                JOptionPane.showMessageDialog(null, "No staff found with ID: " + jTextFieldStaffID.getText());
            }
            rs.close();
            prest.close();
        } catch (SQLException err) {

            System.out.println(err.getMessage());

        }
    }//GEN-LAST:event_jButtonDetailsActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffReports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDetails;
    private javax.swing.JButton jButtonModulesInrolled;
    private javax.swing.JButton jButtonRelatedStudents;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelStaffID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldStaffID;
    // End of variables declaration//GEN-END:variables
}
